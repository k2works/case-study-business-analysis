# coding: utf-8
# %% [markdown]
# # 令和4年度　事例Ⅳ
# %%
# %
import pandas as pd
from IPython.display import display
import sympy as sp
import os
import warnings
warnings.simplefilter('ignore', FutureWarning)
path = os.getcwd()
print(f"Current directory: {path}")
# %% [markdown]
# 第3問（配点20 点）
#
# 　D社は現在、新規事業として検討している魚種Xの養殖事業について短期の利益計画を策定している。
#
# 　当該事業では、自治体からの補助金が活用されるため、事業を実施することによるD社の費用は、水槽等の設備や水道光熱費、人件費のほか、稚魚の購入および餌代、薬剤などに限定される。D社は当面スタートアップ期間として最大年間養殖量が50,000 kg である水槽を設置することを計画しており、当該水槽で魚種X を50,000kg 生産した場合の総経費は3,000万円である。また、この総経費に占める変動費の割合は60％、固定費の割合は40％と見積もられている。D 社がわが国における魚種Xの販売実績を調査したところ、1 kg 当たり平均1,200円で販売されていることが分かった。
#
#（設問1）
#
#　D社は、当該事業をスタートするに当たり、年間1,500万円の利益を達成したいと考えている。この目標利益を達成するための年間販売数量を求めよ（単位：kg）。なお、魚種X の1kg 当たり販売単価は1,200円とし、小数点以下を切り上げて解答すること。
# %%
変動費を計算する = lambda 総費用, 変動費率, 販売数量: (総費用 * 変動費率 / 50000) * 販売数量
固定費を計算する = lambda 総費用, 固定費率: 総費用 * 固定費率
方程式を設定する = lambda 販売数量, 売上高, 変動費, 固定費: sp.Eq(売上高 - 変動費 - 固定費, 15000000)
方程式を解く = lambda 方程式, 販売数量: sp.ceiling(sp.solve(方程式, 販売数量)[0])


def 販売数量を計算する():
    販売数量 = sp.symbols('販売数量')
    売上高 = 1200 * 販売数量
    変動費 = 変動費を計算する(30000000, 0.6, 販売数量)
    固定費 = 固定費を計算する(30000000, 0.4)

    方程式 = 方程式を設定する(販売数量, 売上高, 変動費, 固定費)
    return 方程式を解く(方程式, 販売数量)


販売数量 = 販売数量を計算する()
print(f"販売数量は {販売数量} kgです。")

# %% [markdown]
#（設問2）
#
# D社は最適な養殖量を検討するため、D社の顧客層に対して魚種Xの購買行動に関するマーケティングリサーチを行った。その結果、魚種Xの味については好評を得たものの魚種X がわが国においてあまりなじみのないことから、それが必ずしも購買行動につながらないことが分かった。そこでD社は魚種Xの販売に当たり、D社の商圏においては販売数量に応じた適切な価格設定が重要であると判断し、下表のように目標販売数量に応じた魚種Xの1kg 当たり販売単価を設定することにした。
#
# この販売計画のもとで、年間1,500万円の利益を達成するための年間販売数量を計算し、(a)欄に答えよ（単位：kg）。また、(b)欄には計算過程を示すこと。なお、最終的な解答では小数点以下を切り上げすること。
# 0～20,000 kg 1400円
# 20,000～30,000 kg 1240円
# 30,000～40,000 kg 1060円
# 40,000～50,000 kg 860円
# %%
# 変動の計算関数
変動費を計算する = lambda 総費用, 変動費率, 販売数量: (総費用 * 変動費率 / 50000) * 販売数量
固定費を計算する = lambda 総費用, 固定費率: 総費用 * 固定費率
方程式を設定する = lambda 販売単価, 販売数量, 変動費, 固定費: sp.Eq((販売単価 * 販売数量) - 変動費 - 固定費, 15000000)
方程式を解く = lambda 方程式, 販売数量: sp.ceiling(sp.solve(方程式, 販売数量)[0])
目標販売数量以内か判定する = lambda 販売数量, 目標販売数量: "満たす" if 販売数量 <= 目標販売数量 else "満たさない"


# 販売数量を計算する関数
def 販売数量を計算する(販売単価):
    販売数量 = sp.symbols('販売数量')
    変動費 = 変動費を計算する(30000000, 0.6, 販売数量)
    固定費 = 固定費を計算する(30000000, 0.4)
    方程式 = 方程式を設定する(販売単価, 販売数量, 変動費, 固定費)
    return 方程式を解く(方程式, 販売数量)


# テストケース
ケース = [
    (1400, 20000),
    (1240, 30000),
    (1060, 40000),
    (860, 50000)
]

# 結果の格納
結果 = []
for 販売単価, 目標販売数量 in ケース:
    販売数量 = 販売数量を計算する(販売単価)
    判定 = 目標販売数量以内か判定する(販売数量, 目標販売数量)
    print(f"{目標販売数量 - 20000}～{目標販売数量} kgの場合: {販売数量}, {判定}")
    結果.append((販売単価, 販売数量, 目標販売数量, 判定))

# 目標を満たすレコードを見つけて出力
満たすレコード = [レコード for レコード in 結果 if レコード[3] == "満たす"]

if 満たすレコード:
    # 最後の目標を満たすレコードを出力
    最後の満たすレコード = 満たすレコード[-1]
    print(
        f"販売単価: {最後の満たすレコード[0]}円 販売数量: {最後の満たすレコード[1]}kg を設定する")
else:
    print("目標を満たすレコードはありませんでした。")
